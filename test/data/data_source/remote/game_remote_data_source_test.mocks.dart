// Mocks generated by Mockito 5.4.2 from annotations
// in test_assesment/test/data/data_source/remote/game_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:test_assesment/core/request/base_client.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequestOptions_0 extends _i1.SmartFake
    implements _i2.RequestOptions {
  _FakeRequestOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHeaders_1 extends _i1.SmartFake implements _i2.Headers {
  _FakeHeaders_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseClient extends _i1.Mock implements _i3.BaseClient {
  @override
  _i4.Future<_i2.Response<dynamic>?> requestNetwork({
    required _i3.Method? method,
    required String? path,
    Object? body,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestNetwork,
          [],
          {
            #method: method,
            #path: path,
            #body: body,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i4.Future<_i2.Response<dynamic>?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Response<dynamic>?>.value(),
      ) as _i4.Future<_i2.Response<dynamic>?>);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i2.Response<T> {
  @override
  set data(T? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.RequestOptions get requestOptions => (super.noSuchMethod(
        Invocation.getter(#requestOptions),
        returnValue: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
        returnValueForMissingStub: _FakeRequestOptions_0(
          this,
          Invocation.getter(#requestOptions),
        ),
      ) as _i2.RequestOptions);
  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) => super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
        Invocation.setter(
          #statusCode,
          _statusCode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set statusMessage(String? _statusMessage) => super.noSuchMethod(
        Invocation.setter(
          #statusMessage,
          _statusMessage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Headers get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.Headers);
  @override
  set headers(_i2.Headers? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isRedirect(bool? _isRedirect) => super.noSuchMethod(
        Invocation.setter(
          #isRedirect,
          _isRedirect,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.RedirectRecord> get redirects => (super.noSuchMethod(
        Invocation.getter(#redirects),
        returnValue: <_i2.RedirectRecord>[],
        returnValueForMissingStub: <_i2.RedirectRecord>[],
      ) as List<_i2.RedirectRecord>);
  @override
  set redirects(List<_i2.RedirectRecord>? _redirects) => super.noSuchMethod(
        Invocation.setter(
          #redirects,
          _redirects,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> get extra => (super.noSuchMethod(
        Invocation.getter(#extra),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) => super.noSuchMethod(
        Invocation.setter(
          #extra,
          _extra,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Uri get realUri => (super.noSuchMethod(
        Invocation.getter(#realUri),
        returnValue: _FakeUri_2(
          this,
          Invocation.getter(#realUri),
        ),
        returnValueForMissingStub: _FakeUri_2(
          this,
          Invocation.getter(#realUri),
        ),
      ) as Uri);
}
